{"_id": "4xi6lrywxa5rdq1u", "name": "Daily Exp (Player Trainer)", "permission": {"default": 1}, "type": "script", "scope": "global", "command": "// _id:4xi6lrywxa5rdq1u\n// name:Daily Exp (Player Trainer)\n\n\nconst currentDialogId = randomID()\nconst myActorId = game.user.data.character ? game.user.data.character : \"0\"\nconst myActor = game.actors.get(myActorId)\nconst myCommandRank = myActor.data.data.skills.command.value.value\nconst myTrainerOfChampionsBonus = myActor.data.items.filter(i => i.data.name.includes(\"Trainer of Champions\") && i.data.data.effect.includes(\"additional +5 Experience\"))[0] ? 5 : 0\nconst myAmountTrainablePokemon = myActor.data.items.filter(i => i.data.name.includes(\"Train the Reserves\") && i.data.data.effect.includes(\"equal to twice your Command Rank\"))[0] ? myCommandRank * 2 : myCommandRank\nconst expCandidatePokemons = game.actors.filter(actor => actor.data.data.owner === myActorId)\n\nconst someonesGainedExp = (trainerCommandRank, otherFlatBonus) => (pokemonLevel) => {\n    return (Math.ceil(trainerCommandRank / 2) - 1) * 5 + Math.ceil(pokemonLevel / 2) + otherFlatBonus\n}\n\nconst myGainedExp = someonesGainedExp(myCommandRank, myTrainerOfChampionsBonus)\nlet tablePokemonWidth = 4\n\nvar tableSortCounter = 0\nvar htmlload = \"<p><table>\"\n\nexpCandidatePokemons.forEach(currentPokemon => {\n    const imagePath = currentPokemon.data.img\n    const name = currentPokemon.data.name\n    const id = currentPokemon.data._id\n    const oldExp = currentPokemon.data.data.level.exp\n    const oldLevel = currentPokemon.data.data.level.current\n    const newExp = oldExp + myGainedExp(oldLevel)\n    let htmlLevel = \"\" + oldLevel\n    if (newExp >= currentPokemon.data.data.level.expTillNextLevel) {\n        htmlLevel = \"\" + oldLevel + \" => \" + (oldLevel + 1)\n    }\n\n\n    htmlCheckbox = `<input type=\"checkbox\" class=\"${currentDialogId}\" value=\"${id}\" name=\"${name}\">`\n\n    if (tableSortCounter === 0) {\n        htmlload += \"<tr>\"\n    }\n    htmlload += `<td><img src=\"${imagePath}\" width=60/></td><td>${htmlCheckbox} ${htmlLevel} ${name}<br/> ${oldExp} => ${newExp} </td>`\n    if (tableSortCounter === (tablePokemonWidth - 1)) {\n        htmlload += \"</tr>\"\n    }\n    tableSortCounter = (tableSortCounter + 1) % tablePokemonWidth\n})\n\nhtmlload += \"</table></p>\"\n\nlet d = new Dialog({\n    title: \"Train Pok\u00e9mon\",\n    content: htmlload,\n    buttons: {\n        one: {\n            icon: '<i class=\"fas fa-check\"></i>',\n            label: \"Train Pok\u00e9mon\",\n            callback: () => {\n\n\n                pokemonIds = [...document.getElementsByClassName(currentDialogId)].filter(cb => cb.checked).map(cb => cb.value)\n                if (pokemonIds.length <= myAmountTrainablePokemon) {\n                    let innerHtmlLoad = `<p>Training ${pokemonIds.length} of ${myAmountTrainablePokemon} Pok\u00e9mon</p>\n                                         <p><table>`;\n\n                    pokemonIds.forEach(_id => {\n                        const currentPokemon = game.actors.get(_id)\n                        const imagePath = currentPokemon.data.img\n                        const name = currentPokemon.data.name\n                        const oldExp = currentPokemon.data.data.level.exp\n                        const oldLevel = currentPokemon.data.data.level.current\n                        const newExp = oldExp + myGainedExp(oldLevel)\n                        let htmlLevel = \"\" + oldLevel\n                        if (newExp >= currentPokemon.data.data.level.expTillNextLevel) {\n                            htmlLevel = \"\" + oldLevel + \" => \" + (oldLevel + 1)\n                        }\n\n                        innerHtmlLoad += `<tr>\n                                        <td>\n                                            <img src=\"${imagePath}\" width=60/>\n                                        </td>\n                                        <td>\n                                            ${htmlLevel} ${name}<br/>\n                                            ${oldExp} => ${newExp}\n                                        </td>\n                                      </tr>`\n\n                    })\n\n                    innerHtmlLoad += \"</table></p>\"\n\n                    let okayD = new Dialog({\n                        title: \"Confirm Training\",\n                        content: innerHtmlLoad,\n                        buttons: {\n                            one: {\n                                icon: '<i class=\"fas fa-check\"></i>',\n                                label: \"Confirm Training\",\n                                callback: () => {\n                                    console.log(\"Training pokemon...\")\n                                    let message = ``\n                                    let totalGainedExp = 0\n                                    pokemonIds.forEach(_id => {\n                                        const currentPokemon = game.actors.get(_id)\n                                        const name = currentPokemon.data.name\n                                        const oldExp = currentPokemon.data.data.level.exp\n                                        const oldLevel = currentPokemon.data.data.level.current\n                                        const newExp = oldExp + myGainedExp(oldLevel)\n                                        let htmlLevel = \"\" + oldLevel\n                                        if (newExp >= currentPokemon.data.data.level.expTillNextLevel) {\n                                            htmlLevel = \"\" + oldLevel + \" => \" + (oldLevel + 1)\n                                        }\n                                        totalGainedExp += newExp - oldExp\n                                        let currentMessage = `${name}: ${oldExp} => ${newExp} (Level ${htmlLevel})`\n                                        console.log(currentMessage)\n                                        message += currentMessage + \"<br/>\"\n                                        currentPokemon.update({\"data.level.exp\": newExp})\n                                    })\n                                    message += `<br/>Total gained: ${totalGainedExp}`\n                                    ChatMessage.create({\n                                        whisper: ChatMessage.getWhisperRecipients('GM'),\n                                        content: `\n<div class=\"content flexrow pt-1\" style=\"font-variant:normal\">\n    <div class=\"swsh-box\">\n        <div class=\"swsh-header\" style=\"border-bottom:1px solid #00000020;text-align:center\">\n            <div class=\"d-flex w-100 mt-1 mb-1 justify-content-center\">\n                <span style=\"padding:5px\">Auto Training</span>\n            </div>\n        </div>\n        <div class=\"d-flex w-100 fs-10 justify-content-center\" style=\"flex-wrap:wrap;word-break:break-word\">\n                \n                <div class=\"swsh-header col-sm-12\">\n                    <div class=\"d-flex w-100 mt-1 mb-1 fs-11\" style=\"align-items:center;text-align:center\">\n                        <div class=\"col\">Effect</div>\n                    </div>\n                </div>\n                <div class=\"swsh-body col-sm-12\">\n                    <div class=\"d-flex w-100 mt-1 mb-1 fs-11\" style=\"align-items:center;text-align:center\">\n                        <div class=\"p-1 readable pokemon p8 tight\" style=\"word-break:break-word;text-align:start;line-height:16px\">${message}</div>\n                    </div>\n                </div>\n        </div>\n    </div>\n</div>\n                                    `\n                                    });\n                                }\n                            },\n                            two: {\n                                icon: '<i class=\"fas fa-times\"></i>',\n                                label: \"Stop\",\n                                callback: () => console.log(\"Did not train pokemon.\")\n                            }\n                        },\n                        default: \"two\",\n                        render: html => console.log(\"\"),\n                        close: html => console.log(\"closed training confirm Dialog\")\n                    }, {width: 500, height: 400});\n                    okayD.render(true);\n\n                } else {\n\n                    let tooManyD = new Dialog({\n                        title: \"Failed Training\",\n                        content: `Tried to too many (${pokemonIds.length}) Pok\u00e9mon, only ${myAmountTrainablePokemon} allowed.`,\n                        buttons: {\n                            one: {\n                                icon: '<i class=\"fas fa-check\"></i>',\n                                label: \"Sad\",\n                                callback: () => {\n                                }\n                            }\n                        },\n                        default: \"one\",\n                        render: html => console.log(\"Register interactivity in the rendered dialog\"),\n                        close: html => console.log(\"This always is logged no matter which option is chosen\")\n                    });\n                    tooManyD.render(true);\n\n                }\n\n            }\n        },\n        two: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: \"Cancel\",\n            callback: () => console.log(\"Cancelled Training\")\n        }\n    },\n    default: \"two\",\n    render: html => console.log(\"\"),\n    close: html => console.log(\"Closed Training Selection Dialog\")\n}, {width: 1200, height: 500});\nd.render(true);", "img": "icons/svg/dice-target.svg"}
{"_id": "z44znzdqjwsodbhy", "name": "Reset and Set Trainings", "permission": {"default": 1}, "type": "script", "scope": "global", "command": "// _id:z44znzdqjwsodbhy\n// name:Reset and Set Trainings\n\n/**\n * This macro\n * 1. shows you all your Pokemon with all trainings your char has learned\n * 2. let you select trainings per pokemon\n * 3. on confirm, removes ALL TRAININGS AND ORDERS from all your pokemon and makes it only your selected trainings are present.\n *\n * Why would you like to use it: After each day, all trainings reset. To make sure no Pokemon has their\n * trainings false kept, it resets all by default.\n */\n\n/**\n * For each run of the script, a unique ID is generated and used in HTML IDs to avoid confusion between multiple instances of the macro running in parallel.\n */\nconst currentDialogId = randomID()\n\n/**\n * Returns a HTML table for a specific pokemon given its id. Only displays the trainings a trainer has.\n * @param pokemonId\n * @param hasAgility\n * @param hasBrutal\n * @param hasInspired\n * @param hasFocused\n * @returns {string}\n */\nfunction htmlCheckboxSnippetForPokemonId(pokemonId, hasAgility, hasBrutal, hasInspired, hasFocused) {\n    let result = `<table>`\n    if (hasAgility)\n        result += `<tr><td>Agility</td> <td><input type=\"checkbox\" class=\"${currentDialogId}\" value=\"agility\" name=\"${pokemonId}\"></td></tr>`\n    if (hasBrutal)\n        result += `<tr><td>Brutal</td>  <td><input type=\"checkbox\" class=\"${currentDialogId}\" value=\"brutal\" name=\"${pokemonId}\"></td></tr>`\n    if (hasInspired)\n        result += `<tr><td>Inspired</td><td><input type=\"checkbox\" class=\"${currentDialogId}\" value=\"inspired\" name=\"${pokemonId}\"></td></tr>`\n    if (hasFocused)\n        result += `<tr><td>Focused</td> <td><input type=\"checkbox\" class=\"${currentDialogId}\" value=\"focused\" name=\"${pokemonId}\"></td></tr>`\n    result += `</table>`\n    return result\n}\n\n/**\n * Check if an actor as a FoundryVTT Item. That Item can be an Edge, Feature or inventory Item.\n * @param actor The actor that is checked for an Item\n * @param nameIncluded A string that must be included in the searched items title. Not an exact match.\n * @param descIncluded A string that must be included in the searched items description. Not an exact match.\n * @returns {boolean}\n */\nfunction hasItemWithNameIncludingAndDescriptionIncluding(actor, nameIncluded, descIncluded) {\n    return actor.data.items.filter(i => i.data.name.includes(nameIncluded) && i.data.data.effect.includes(descIncluded)).length > 0\n}\n\nconst allPaths = [\n    \"data.training.agility.trained\",\n    \"data.training.agility.ordered\",\n    \"data.training.brutal.trained\",\n    \"data.training.brutal.ordered\",\n    \"data.training.inspired.trained\",\n    \"data.training.inspired.ordered\",\n    \"data.training.focused.trained\",\n    \"data.training.focused.ordered\"\n]\n\nconst myPlayerCharacterActorID = game.user.data.character\nconst myPlayerCharacterActor = game.actors.get(myPlayerCharacterActorID)\nconst hasAgilityTraining = hasItemWithNameIncludingAndDescriptionIncluding(myPlayerCharacterActor, \"Agility Training\", \"becomes Agile\")\nconst hasBrutalTraining = hasItemWithNameIncludingAndDescriptionIncluding(myPlayerCharacterActor, \"Brutal Training\", \"becomes Brutal\")\nconst hasFocusedTraining = hasItemWithNameIncludingAndDescriptionIncluding(myPlayerCharacterActor, \"Focused Training\", \"becomes Focused\")\nconst hasInspiredTraining = hasItemWithNameIncludingAndDescriptionIncluding(myPlayerCharacterActor, \"Inspired Training\", \"becomes Inspired\")\nconst allPokemonsOwnedByMyActor = game.actors.filter(actor => actor.data.data.owner === myPlayerCharacterActorID)\n\n\nconst tableWidth = 4\nlet tableSortCounter = 0\nlet htmlload = `<p><table>`\n\nfor (let pokemon of allPokemonsOwnedByMyActor) {\n    const imagePath = pokemon.data.img\n    const name = pokemon.data.name\n    const id = pokemon.data._id\n\n    if (tableSortCounter === 0) {\n        htmlload += \"<tr>\"\n    }\n\n    const htmlCheckboxSnippet = htmlCheckboxSnippetForPokemonId(id, hasAgilityTraining, hasBrutalTraining, hasInspiredTraining, hasFocusedTraining)\n    htmlload += `<td>${htmlCheckboxSnippet}</td><td><img src=\"${imagePath}\" width=60/></td>`\n    if (tableSortCounter === (tableWidth - 1)) {\n        htmlload += \"</tr>\"\n    }\n\n\n    tableSortCounter = (tableSortCounter + 1) % tableWidth\n}\n\nhtmlload += `</table></p>`\n\nlet d = new Dialog({\n    title: \"Train Pok\u00e9mon\",\n    content: htmlload,\n    buttons: {\n\n\n        one: {\n            icon: '<i class=\"fas fa-check\"></i>',\n            label: \"Train Pok\u00e9mon\",\n            callback: () => {\n\n                const trainedPokemonIds = [...new Set([...document.getElementsByClassName(currentDialogId)].filter(cb => cb.checked).map(cb => cb.name))]\n                for (const pokemon of allPokemonsOwnedByMyActor) {\n                    const id = pokemon.data._id\n                    const effects = [];\n                    console.log(pokemon)\n                    pokemon.data.effects.forEach(effect => {\n                        if (effect.data.changes.some(change => change.key.startsWith(\"data.training\"))) {\n                            effects.push(effect.id);\n                            console.log(`pushing ${effect.id}`)\n                        } else {\n                            console.log(effect)\n                        }\n                    });\n\n                    for (let id of effects) {\n                        pokemon.effects.get(id).delete();\n                    }\n\n                    pokemon.update({[allPaths]: false});\n\n                    console.log(`Cleared ${pokemon.name}`)\n                    console.log(id)\n                    console.log(trainedPokemonIds)\n                    if (trainedPokemonIds.includes(id)) {\n                        let effectDatas = []\n                        const isOrder = false\n                        for (let training of [...document.getElementsByClassName(currentDialogId)].filter(cb => cb.checked && cb.name === id).map(cb => cb.value)) {\n                            const path = `data.training.${training}.trained`\n                            effectDatas.push({\n                                changes: [{\n                                    \"key\": path,\n                                    \"mode\": 5,\n                                    \"value\": true,\n                                    \"priority\": 50\n                                }].concat(game.ptu.getTrainingChanges(training, isOrder).changes),\n                                label: `${training.capitalize()} ${training == 'critical' ? \"Moment\" : isOrder ? \"Order\" : \"Training\"}`,\n                                icon: \"\",\n                                transfer: false,\n                                \"flags.ptu.editLocked\": true,\n                                _id: randomID()\n                            })\n                            console.log(`Added ${training}`)\n                        }\n                        pokemon.createEmbeddedDocuments(\"ActiveEffect\", effectDatas);\n                        console.log(\"Pushed Trainings\")\n                    }\n\n                }\n            }\n        },\n        two: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: \"Cancel\",\n            callback: () => console.log(\"Cancelled Training\")\n        }\n    },\n\n    default: \"two\",\n    render: html => console.log(\"\"),\n    close: html => console.log(\"Closed Training Selection Dialog\")\n}, {width: 1200});\nd.render(true);", "img": "icons/svg/dice-target.svg"}
{"_id": "0v8r4tasvn7c4fu5", "name": "Pok\u00e9mon Info", "permission": {"default": 1}, "type": "script", "scope": "global", "command": "// _id:0v8r4tasvn7c4fu5\n// name:Pok\u00e9mon Info\n\npersonalNotes = ```\nHere is some Space for personal notes <3\n```\n\nfunction hmtlActorLinkForPokemon(pokemon) {\n    return `<a class=\"entity-link content-link\" draggable=\"true\" data-type=\"Actor\" data-entity=\"Actor\" data-id=\"${pokemon.data._id}\"><i class=\"fas fa-user\"></i> ${pokemon.name}</a>`\n}\n\nlet d = new Dialog({\n    title: \"Pok\u00e9mon Info\",\n    content: `\nPersonal Notes:<br/>\nthat you might wanna keep Track of<br/><br/>\nInjuries:<br>\n${game.actors.filter(actor => actor.data.data.owner === game.user.data.character).filter(pkm => pkm.data.data.health.injuries).map(pkm => `${hmtlActorLinkForPokemon(pkm)}: ${pkm.data.data.health.injuries}`).join(\", \")}<br/><br/>\nLevel-Up Points:<br>\n${game.actors.filter(actor => actor.data.data.owner === game.user.data.character).filter(pkm => pkm.data.data.levelUpPoints).map(pkm => `${hmtlActorLinkForPokemon(pkm)}: ${pkm.data.data.levelUpPoints}`).join(\", \")}<br/><br/>\nMissing HP:<br>\n${game.actors.filter(actor => actor.data.data.owner === game.user.data.character).filter(pkm => pkm.data.data.health.value !== pkm.data.data.health.max).map(pkm => `${hmtlActorLinkForPokemon(pkm)}: ${pkm.data.data.health.value - pkm.data.data.health.max}`).join(\", \")}<br/><br/>\nCombat Stages:<br>\n${game.actors.filter(actor => actor.data.data.owner === game.user.data.character).filter(pkm => pkm.data.data.stats.atk.stage.value !== 0 || pkm.data.data.stats.def.stage.value !== 0 || pkm.data.data.stats.spatk.stage.value !== 0 || pkm.data.data.stats.spdef.stage.value !== 0 || pkm.data.data.stats.spd.stage.value !== 0).map(pkm => `${hmtlActorLinkForPokemon(pkm)}`).join(\", \")}<br/><br/>\nFood Buffs:<br/>\n${game.actors.filter(actor => actor.data.data.owner === game.user.data.character).filter(pkm => pkm.data.data.digestionBuff).map(pkm => `${hmtlActorLinkForPokemon(pkm)}: ${pkm.data.data.digestionBuff}`).join(\", \")}<br/><br/>\nHeld Items:<br/>\n${game.actors.filter(actor => actor.data.data.owner === game.user.data.character).filter(pkm => pkm.data.data.heldItem && pkm.data.data.heldItem != \"None\").map(pkm => `${hmtlActorLinkForPokemon(pkm)}: ${pkm.data.data.heldItem}`).join(\", \")}<br/><br/>\nTrained:<br/>\n${game.actors.filter(actor => actor.data.data.owner === game.user.data.character).filter(pkm => pkm.data.data.training.agility.trained || pkm.data.data.training.brutal.trained ||pkm.data.data.training.focused.trained ||pkm.data.data.training.inspired.trained).map(pkm => `${hmtlActorLinkForPokemon(pkm)}`).join(\", \")}\n<br/> \n`,\n    buttons: {\n      one: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: \"Cancel\",\n            callback: () => console.log(\"Cancelled Info\")\n        }\n    },\n    close: html => console.log(\"Closed Info Dialog\")\n});\nd.render(true);", "img": "icons/svg/dice-target.svg"}
{"_id": "p2qr3l1pcbbwgdog", "name": "Set Trainer and Pokemon Prototype token", "permission": {"default": 1}, "type": "script", "scope": "global", "command": "// _id:p2qr3l1pcbbwgdog\n// name:Set Trainer and Pokemon Prototype token\n\n// For some reasons, they store them as int\nconst RESOURCE_NEVER_DISPLAYED = 0\nconst RESOURCE_WHEN_CONTROLLER = 10\nconst RESOURCE_HOVERED_BY_OWNER = 20\nconst RESOURCE_HOVERED_BY_ANYONE = 30\nconst RESOURCE_ALWAYS_FOR_OWNER = 40\nconst RESOURCE_ALWAYS_FOR_ANYONE = 50\n\nconst DISPOSITION_FRIENDLY = 1\nconst DISPOSITION_NEUTRAL = 0\nconst DISPOSITION_HOSTILE = -1\n\n// Feel free to set Bar and Name visibilities here\nconst MY_AND_MY_POKEMONS_DISPOSITION_SHOULD_BE_DISPLAYED_AS = DISPOSITION_FRIENDLY\nconst MY_AND_MY_POKEMONS_RESOURCE_BARS_SHOULD_BE_DISPLAYED = RESOURCE_HOVERED_BY_ANYONE\nconst MY_AND_MY_POKEMONS_NAMES_SHOULD_BE_DISPLAYED = RESOURCE_HOVERED_BY_ANYONE\n\n//Per default, the trainer is the loggin in users marked player character\n//const trainerActorId = game.user.data.character\n//Could also be set manually\n//const trainerActorId = \"ajsdghsafjgajfgasf\"\nconst trainerActorId = game.user.data.character\n\n\n// First your Trainer Token, then all pokemon owned by that trainer\ngame.actors.get(trainerActorId).update({\n  \"token.disposition\" : MY_AND_MY_POKEMONS_DISPOSITION_SHOULD_BE_DISPLAYED_AS,\n  \"token.displayBars\" : MY_AND_MY_POKEMONS_RESOURCE_BARS_SHOULD_BE_DISPLAYED,\n  \"token.displayName\" : MY_AND_MY_POKEMONS_NAMES_SHOULD_BE_DISPLAYED})\ngame.actors.filter(actor => actor.data.data.owner === trainerActorId).forEach(pkm => pkm.update({\n  \"token.disposition\" :  MY_AND_MY_POKEMONS_DISPOSITION_SHOULD_BE_DISPLAYED_AS,\n  \"token.displayBars\" : MY_AND_MY_POKEMONS_RESOURCE_BARS_SHOULD_BE_DISPLAYED,\n  \"token.displayName\" : MY_AND_MY_POKEMONS_NAMES_SHOULD_BE_DISPLAYED}))", "img": "icons/svg/dice-target.svg"}
{"_id": "3aj6fpfms8nqq0uj", "name": "TEMPLATE Sage Shield Macro for Specific Player", "permission": {"default": 1}, "type": "script", "scope": "global", "command": "// _id:3aj6fpfms8nqq0uj\n// name:TEMPLATE Sage Shield Macro for Specific Player\n//\n// edit the line with\n// const playerName\n\n// Manually set the name of the Sage PLAYERS name, not the Actor/Char\nconst playerName = \"SomePlayerName\"\nconst sageActor = game.actors.get(game.users.filter(u => u.name === playerName)[0].data.character)\n\n// const sageActor = game.get(someId)\n\nconst off = {\n  light: {\n    alpha: 1,\n    angle: 0,\n    bright: 0,\n    color: \"#ffffff\",\n    coloration: 1,\n    dim: 0,\n    gradual: true,\n    luminosity: 0.5,\n    saturation: 0,\n    contrast: 0,\n    shadows: 0,\n    animation: {\n        speed: 5,\n        intensity: 5,\n        reverse: false,\n        type: \"none\"\n    },\n    darkness: {\n      min: 0,\n      max: 1\n    }\n  }\n}\n\n\nconst sage = {\n  light: {\n    alpha: 0.35,\n    angle: 0,\n    bright: 0,\n    color: \"#454545\",\n    coloration: 0.5,\n    dim: 0.35,\n    gradual: true,\n    luminosity: 0.5,\n    saturation: 0,\n    contrast: 0,\n    shadows: 0,\n    animation: {\n        speed: 3,\n        intensity: 6,\n        reverse: false,\n        type: \"fairy\"\n    },\n    darkness: {\n      min: 0,\n      max: 1\n    }\n  }\n}\n\n\nconst sageName = sageActor.data.name\nconst effectName = sageName + \" Sage Damage Reduction\"\nconst sageOccRank = sageActor.data.data.skills.occultEd.value.total\n\n\ngame.canvas.tokens.controlled.forEach(token => {\n  const actor = token.actor\n  let removedExisting = false\n  let removeIds = []\n  actor.data.effects.filter(e => e.data.label == effectName).forEach( e => {\n    removeIds.push(e.id)\n  })\n  removeIds.forEach((id, i) => {\n    actor.effects.get(id).delete()\n    token.document.update(off)\n    removedExisting = true\n  });\n\n\n\n  if(! removedExisting){\n    const tick = actor.data.data.health.tick\n    let reduction = tick > sageOccRank*2 ? tick : sageOccRank*2\n    const effectData = {\n        changes: [\n          {\"key\":\"data.modifiers.damageReduction.physical.mod\",\"mode\":2,\"value\":reduction,\"priority\":40},\n          {\"key\":\"data.modifiers.damageReduction.special.mod\",\"mode\":2,\"value\":reduction,\"priority\":40}],\n        label: effectName,\n        icon: \"\",\n        transfer: false,\n        \"flags.ptu.editLocked\": false,\n        _id: randomID()\n    }\n    actor.createEmbeddedDocuments(\"ActiveEffect\", [effectData])\n    token.document.update(sage)\n  }\n})", "img": "icons/svg/dice-target.svg"}