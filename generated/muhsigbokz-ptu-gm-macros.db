{"_id": "t5w36dka5p5ztqte", "name": "[GM] CapRate of Token (w/o Shiny)", "permission": {"default": 1}, "type": "script", "scope": "global", "command": "// _id:t5w36dka5p5ztqte\n// name:[GM] CapRate of Token (w/o Shiny)\n// img:https://pngimg.com/uploads/pokeball/pokeball_PNG19.png\n\n//\n\nconst ten = [\"Burned\", \"Frozen\", \"Paralysis\", \"Poisoned\", \"Badly Poisoned\", \"Slowed\"]\nconst fifteen = [\"Stuck\"]\nconst round_turn_regex = /^R[0-9]* - T[0-9]*:/\nconst order_training_regex = /^[A-Z][a-z]* (Order|Training)/\n\ncanvas.tokens.controlled.filter(token => token.actor.data.data.species).forEach((token, index) => {\n  const actor = token.actor\n  let cr = 100\n  let mods_html = \"\"\n\n\n  //Evo\n  const speciesName = actor.data.data.species\n  console.log(speciesName)\n  const species = game.ptu.GetSpeciesData(speciesName)\n  console.log(species)\n  const currentStage = species.Evolution.filter(evo => evo[1].toUpperCase() == speciesName.toUpperCase())[0][0]\n  console.log(currentStage)\n  let arr = species.Evolution.map(a => a[0]).sort((a,b)=> a-b)\n  console.log(arr)\n  const maxStageOfLine = arr[arr.length-1]\n  // -10 if max, 0 if one under, 10 if two under...\n  const evoMod = (maxStageOfLine - currentStage ) * 10 - 10\n  mods_html += `<tr><td>${maxStageOfLine - currentStage} Evos left</td><td>${evoMod}</td></tr>\\n`\n  cr+=evoMod\n\n  //Level\n  const level = actor.data.data.level.current\n  mods_html += `<tr><td>Level ${level}</td><td>-${level*2}</td></tr>\\n`\n  cr -= level*2\n\n  //HP\n  const ratio = actor.data.data.health.value / actor.data.data.health.max\n  if (ratio >0.75 ) {\n    mods_html += `<tr><td>HP over 75%</td><td>-30</td></tr>\\n`\n    cr -= 30\n  } else if (ratio >0.5 ) {\n    mods_html += `<tr><td>HP over 50%</td><td>-15</td></tr>\\n`\n    cr -= 15\n  } else if (ratio >0.25 ) {\n    mods_html += `<tr><td>HP over 25%</td><td>+-0</td></tr>\\n`\n    cr -= 0\n  } else if (actor.data.data.health.value > 1) {\n    mods_html += `<tr><td>HP over 1</td><td>+15</td></tr>\\n`\n    cr += 15\n  } else {\n    mods_html += `<tr><td>HP at 1</td><td>+30</td></tr>\\n`\n    cr += 30\n  }\n\n  // Injuries\n  const injuries = actor.data.data.health.injuries\n  cr += injuries * 5\n    mods_html += `<tr><td>${injuries} Injuries</td><td>${injuries * 5}</td></tr>\\n`\n\n\n  //Effects\n  actor.effects.forEach((effect, nothing) => {\n    const label = effect.data.label\n    if(fifteen.includes(label)){\n      mods_html += `<tr><td>${label}</td><td>+15</td></tr>\\n`\n      cr += 15\n    } else if (ten.includes(label)) {\n      mods_html += `<tr><td>${label}</td><td>+10</td></tr>\\n`\n      cr += 10\n    } else if (round_turn_regex.test(label)) {\n      mods_html += `<tr><td>${label}</td><td>/Move/</td></tr>\\n`\n      cr += 0\n    } else if (order_training_regex.test(label)) {\n      mods_html += `<tr><td>${label}</td><td>/OrTr/</td></tr>\\n`\n      cr += 0\n    } else {\n      mods_html += `<tr><td>${label}</td><td>+5</td></tr>\\n`\n      cr += 5\n    }\n  });\n\n  const msg = `<table>\n  <tr><td>Pokemon</td><td>${actor.data.name}</td></tr>\n  <tr><td>Base</td><td>100</td></tr>\n  ${mods_html}\n  <tr><td>---</td><td>---</td></tr>\n  <tr><td>Total w/o Shiny</td><td>${cr}</td></tr>\n  </table>`\n\n  ChatMessage.create({\n    whisper: ChatMessage.getWhisperRecipients('GM'),\n    content: msg});\n});", "img": "https://pngimg.com/uploads/pokeball/pokeball_PNG19.png"}
{"_id": "m4byik5x5jsqm783", "name": "[GM] Set LinkActorData for whole directories, no sub directories", "permission": {"default": 1}, "type": "script", "scope": "global", "command": "// _id:m4byik5x5jsqm783\n// name:[GM] Set LinkActorData for whole directories, no sub directories\n// img:https://freepngimg.com/thumb/tool/1-2-tool-free-png-image.png\n\nlet agenda = [{\"id\": null, \"path\": [\"Root\"]}]\nlet all = []\nconst currentDialogId = randomID()\n\nwhile (agenda.length > 0){\n  let current = agenda.pop()\n  let current_folder = current[\"id\"]\n  let current_path = current[\"path\"]\n\n  game.folders.filter(f => f.data.parent == current_folder && f.data.type == \"Actor\").forEach(f => {\n    agenda.push({\"id\": f.data._id, \"path\": current_path.concat([f.data.name])})\n  })\n\n  all.push({\"id\": current_folder, \"path\": current_path})\n}\nlet msg = \"<table>\"\n\nall.forEach(x => {\n  msg+= `<tr><td>${x[\"path\"].join(\">\")}</td><td><input type=\"checkbox\" value=\"${x[\"id\"]}\" class=\"${currentDialogId}\"/></td></tr>`\n})\nmsg+=`</table>`\nlet d = new Dialog({\n    title: \"Link/Unlink Tokens\",\n    content: msg,\n    buttons: {\n      one: {\n        icon: '<i class=\"fas fa-check\"></i>',\n        label: \"Link Tokens\",\n        callback: () => {\n\n            const changedFolders = [...new Set([...document.getElementsByClassName(currentDialogId)].filter(cb => cb.checked).map(cb => cb.value))]\n            console.log(changedFolders)\n            for (const folder of changedFolders) {\n                game.actors.filter(a => a.data.folder == folder).forEach(actor => {\n                  actor.update({\"token.actorLink\": true})\n                })\n            }\n        }\n      },\n      two: {\n        icon: '<i class=\"fas fa-check\"></i>',\n        label: \"Unlink Tokens\",\n        callback: () => {\n\n            const changedFolders = [...new Set([...document.getElementsByClassName(currentDialogId)].filter(cb => cb.checked).map(cb => cb.value))]\n            console.log(changedFolders)\n            for (const folder of changedFolders) {\n                game.actors.filter(a => a.data.folder == folder).forEach(actor => {\n                  actor.update({\"token.actorLink\": false})\n                })\n            }\n        }\n      }\n    },\n    default: \"two\",\n    render: html => console.log(\"\"),\n    close: html => console.log(\"Closed Training Selection Dialog\")\n}, {width: 1200});\nd.render(true);", "img": "https://freepngimg.com/thumb/tool/1-2-tool-free-png-image.png"}
{"_id": "q1sjkviox8d21cew", "name": "[GM] Pok\u00e9mon Info for all Users", "permission": {"default": 1}, "type": "script", "scope": "global", "command": "// _id:q1sjkviox8d21cew\n// name:[GM] Pok\u00e9mon Info for all Users\n// img:https://upload.wikimedia.org/wikipedia/commons/2/29/Octicons-info.svg\n\nfunction hmtlActorLinkForPokemon(pokemon) {\n    return `<a class=\"entity-link content-link\" draggable=\"true\" data-type=\"Actor\" data-entity=\"Actor\" data-id=\"${pokemon.data._id}\"><i class=\"fas fa-user\"></i> ${pokemon.name}</a>`\n}\n\n\nallCont = ``\n\ngame.users.map(u => game.users.get(u.id).character).filter(a => a).map(a => a.id).forEach(currentUser => {\n  allCont += `\n <h2>${game.actors.get(currentUser).name}</h2><br/>\n Injuries:<br>\n ${game.actors.filter(actor => actor.data.data.owner === currentUser).filter(pkm => pkm.data.data.health.injuries).map(pkm => `${hmtlActorLinkForPokemon(pkm)}: ${pkm.data.data.health.injuries}`).join(\", \")}<br/><br/>\n Level-Up Points:<br>\n ${game.actors.filter(actor => actor.data.data.owner === currentUser).filter(pkm => pkm.data.data.levelUpPoints).map(pkm => `${hmtlActorLinkForPokemon(pkm)}: ${pkm.data.data.levelUpPoints}`).join(\", \")}<br/><br/>\n Missing HP:<br>\n ${game.actors.filter(actor => actor.data.data.owner === currentUser).filter(pkm => pkm.data.data.health.value !== pkm.data.data.health.max).map(pkm => `${hmtlActorLinkForPokemon(pkm)}: ${pkm.data.data.health.value - pkm.data.data.health.max}`).join(\", \")}<br/><br/>\n Combat Stages:<br>\n ${game.actors.filter(actor => actor.data.data.owner === currentUser).filter(pkm => pkm.data.data.stats.atk.stage.value !== 0 || pkm.data.data.stats.def.stage.value !== 0 || pkm.data.data.stats.spatk.stage.value !== 0 || pkm.data.data.stats.spdef.stage.value !== 0 || pkm.data.data.stats.spd.stage.value !== 0).map(pkm => `${hmtlActorLinkForPokemon(pkm)}`).join(\", \")}<br/><br/>\n Food Buffs:<br/>\n ${game.actors.filter(actor => actor.data.data.owner === currentUser).filter(pkm => pkm.data.data.digestionBuff).map(pkm => `${hmtlActorLinkForPokemon(pkm)}: ${pkm.data.data.digestionBuff}`).join(\", \")}<br/><br/>\n Held Items:<br/>\n ${game.actors.filter(actor => actor.data.data.owner === currentUser).filter(pkm => pkm.data.data.heldItem && pkm.data.data.heldItem != \"None\").map(pkm => `${hmtlActorLinkForPokemon(pkm)}: ${pkm.data.data.heldItem}`).join(\", \")}<br/><br/>\n Trained:<br/>\n ${game.actors.filter(actor => actor.data.data.owner === currentUser).filter(pkm => pkm.data.data.training.agility.trained || pkm.data.data.training.brutal.trained ||pkm.data.data.training.focused.trained ||pkm.data.data.training.inspired.trained).map(pkm => `${hmtlActorLinkForPokemon(pkm)}`).join(\", \")}\n <br/><br/><br/>\n `\n })\n\n\nlet d = new Dialog({\n    title: \"Train Pok\u00e9mon\",\n    content: allCont,\n    buttons: {\n      one: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: \"Cancel\",\n            callback: () => console.log(\"Cancelled Info\")\n        }\n    },\n    close: html => console.log(\"Closed Info Dialog\")\n}, {width: 1200});\nd.render(true);", "img": "https://upload.wikimedia.org/wikipedia/commons/2/29/Octicons-info.svg"}
{"_id": "754plak2oihprtx0", "name": "Glitch3", "permission": {"default": 1}, "type": "script", "scope": "global", "command": "// _id:754plak2oihprtx0\n// name:Glitch3\n// img:https://wiki.p-insurgence.com/File:722.png\n\n\nconst forbiddenMoveNames = [\n    \"After You\",\n    \"Assist\",\n    \"Bestow\",\n    \"Copycat\",\n    \"Counter\",\n    \"Covet\",\n    \"Crafty Shield\",\n    \"Destiny Bond\",\n    \"Detect\",\n    \"Endure\",\n    \"Feint\",\n    \"Focus Punch\",\n    \"Follow Me\",\n    \"Helping Hand\",\n    \"King\u2019s Shield\",\n    \"Metronome\",\n    \"Me First\",\n    \"Mimic\",\n    \"Mirror Coat\",\n    \"Mirror Move\",\n    \"Protect\",\n    \"Quash\",\n    \"Quick Guard\",\n    \"Rage Powder\",\n    \"Sketch\",\n    \"Sleep Talk\",\n    \"Snatch\",\n    \"Snore\",\n    \"Spiky Shield\",\n    \"Switcheroo\",\n    \"Thief\",\n    \"Transform\",\n    \"Trick\",\n    \"Wide Guard\"\n]\nconst moveSourcesArray = [\n    {\n        name: \"Base Moves\",\n        weight: 1,\n        map: game.packs.get(\"ptu.moves\"),\n        keys: Array.from(game.packs.get(\"ptu.moves\").index.keys())\n    }\n]\n//\n// const moveSourcesArray = [\n//     {\n//         name: \"Base Moves\",\n//         weight: 1,\n//         map: game.packs.get(\"ptu.moves\"),\n//         keys: Array.from(game.packs.get(\"ptu.moves\").index.keys())\n//     },\n//     {\n//         name: \"Glitch Moves\",\n//         weight: 100,\n//         map: game.packs.get(\"world.glitchmoves\"),\n//         keys: Array.from(game.packs.get(\"ptu.glitchmoves\").index.keys())\n//     }\n// ]\n\n\n\nconst numWeightedIndexes = moveSourcesArray.map(x => x.keys.length * x.weight).reduce((acc, i) => acc + i)\n\nlet pulledMoves = []\n\nfor (let i = 0; i < 3; i++) {\n\n    let pulledMove\n    console.log(`Move n: ${i}`)\n    do {\n        let randIndex = Math.floor(Math.random() * numWeightedIndexes)\n        console.log(`Randed: ${randIndex}/${numWeightedIndexes} `)\n\n        pulledMove = null\n\n        let currentSource = 0\n        console.log(`SourcI: ${currentSource}`)\n        while (pulledMove == null && currentSource < moveSourcesArray.length) {\n            let source = moveSourcesArray[currentSource]\n            console.log(`Source: ${source}`)\n            if (randIndex < source.keys.length * source.weight) {\n                console.log(`Pull:   ${Math.floor(randIndex / source.weight)}`)\n                pulledMove = (await source.map.getDocument(source.keys[Math.floor(randIndex / source.weight)]))\n                console.log(`Pulled: ${pulledMove}`)\n            } else {\n                randIndex -= source.weight * source.keys.length\n                console.log(`New In: ${randIndex}`)\n                currentSource += 1\n            }\n        }\n\n\n    } while (pulledMove == null || forbiddenMoveNames.includes(pulledMove.data.data.name))\n    console.log(pulledMove)\n\n    pulledMoves.push(pulledMove)\n\n}\nconsole.log(pulledMoves)\n\nChatMessage.create({\n    whisper: ChatMessage.getWhisperRecipients('GM'),\n    content: pulledMoves.map(m => `<a class=\"entity-link content-link\" draggable=\"true\" data-pack=\"${m.pack}\" data-id=\"${m.data._id}\"><i class=\"fas fa-suitcase\"></i>${m.data.name}</a>`).join(\"<br/>\")\n})", "img": "https://wiki.p-insurgence.com/File:722.png"}